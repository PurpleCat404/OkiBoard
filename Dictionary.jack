class Dictionary {
    field Array keys;
    field Array values;
    field int size;
    field int capacity;

    // Конструктор
    constructor Dictionary new(int initialCapacity) 
    {
        let capacity = initialCapacity;
        let keys = Array.new(capacity);
        let values = Array.new(capacity);
        let size = 0;
        return this;
    }

    // Добавление пары ключ-значение
    method void put(int key, int value) 
    {
        var int i;
        let i = indexOf(key);
        if (i != -1) {
            let values[i] = value; // Обновление существующего значения
        } 
        else 
        {
            if (size = capacity) 
            {
                do expandCapacity();
            }
            let keys[size] = key;
            let values[size] = value;
            let size = size + 1;
        }
        return;
    }

    // Получение значения по ключу
    method int get(int key) 
    {
        var int i;
        let i = indexOf(key);
        if (~(i = -1)) 
        {
            return values[i];
        } 
        else 
        {
            return -1; // Или другое специальное значение, обозначающее отсутствие ключа
        }
    }

    // Удаление пары ключ-значение
    method void remove(int key) 
    {
        var int i;
        let i = indexOf(key);
        if (~(i = -1)) 
        {
            while (i < size - 1) 
            {
                let keys[i] = keys[i + 1];
                let values[i] = values[i + 1];
                let i = i + 1;
            }
            let size = size - 1;
        }
        return;
    }

    // Вспомогательный метод для поиска индекса ключа
    function int indexOf(int key) 
    {
        var int i;
        let i = 0;
        while (i < size) 
        {
            if (keys[i] = key) 
            {
                return i;
            }
            let i = i + 1;
        }
        return -1;
    }

    // Вспомогательный метод для расширения емкости
    function void expandCapacity() 
    {
        var Array newKeys;
        var Array newValues;
        var int i;
        let capacity = capacity * 2;
        let newKeys = Array.new(capacity);
        let newValues = Array.new(capacity);
        let i = 0;
        while (i < size) 
        {
            let newKeys[i] = keys[i];
            let newValues[i] = values[i];
            let i = i + 1;
        }
        let keys = newKeys;
        let values = newValues;
        return;
    }
}