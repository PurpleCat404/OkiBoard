class OKeyboard {

    field Button ESC; 
    field Button F1; field Button F2; field Button F3; field Button F4;
    field Button F5; field Button F6; field Button F7; field Button F8;
    field Button F9; field Button F10; field Button F11; field Button F12;

    field Button YO; field Button ONE; field Button TWO; field Button THREE;
    field Button FOUR; field Button FIVE; field Button SIX; field Button SEVEN;
    field Button EIGHT; field Button NINE; field Button ZERO; field Button DASH;
    field Button PLUS;  field Button BACKSPACE;

    field Button TAB; field Button Q; field Button W; field Button E;
    field Button R; field Button T; field Button Y; field Button U;
    field Button I; field Button O; field Button P;
    field Button RGHTSQRBRCKT; field Button LFTSQRBRCKT;  field Button BCSLSH;

    field Button CAPS; field Button A; field Button S; field Button D;
    field Button F; field Button G; field Button H; field Button J;
    field Button K; field Button L; field Button JI; field Button QU;
    field Button ENTER;

    field Button LSHIFT;
    field Button Z; field Button X; field Button C; field Button V;
    field Button B; field Button N; field Button M; field Button COMMA;
    field Button DOT; field Button SLSH; field Button RSHIFT;

    field Button LCTRL; field Button WIN; field Button LALT;
    field Button SPACE; field Button RALT; field Button FN;
    field Button CAT; // THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT 
    field Button RCTRL;

    field Button LEFT; field Button DOWN; field Button RIGHT; field Button UP;

    field Button PRINT; field Button SCROLL; field Button PAUSE;
    field Button INSERT; field Button HOME; field Button PAGEUP;
    field Button PAGEDOWN; field Button DELETE; field Button END;

    field int i;
    field int j;
    field int shift;
    field int k;


    field Array IsPressed;

    field Point point;

    method void drawFrame()
    {
        do Screen.setColor(true);
        do Screen.drawRectangle(43, 45, 457, 209);
        do Screen.setColor(false);
        do Screen.drawRectangle(44, 46, 454, 206);
        return;
    }

    method void drawButton(Button button)
    {
        let point = button.LeftTopCorner();
        do Screen.setColor(true);
        do Screen.drawRectangle(point.X(), point.Y(), point.X() + button.Width(), point.Y() + button.Height());
        do Screen.setColor(false);
        do Screen.drawRectangle(point.X() + 1, point.Y() + 1, point.X() + button.Width() - 3, point.Y() + button.Height() - 3);
        return;
    }


    method void coverButton(Button button)
    {
        let point = button.LeftTopCorner();
        do Screen.setColor(true);
        do Screen.drawRectangle(point.X(), point.Y(), point.X() + button.Width(), point.Y() + button.Height());
        return;
    }

    function void drawCat(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 4096);
        do Memory.poke(memAddress +32, 10240);
        do Memory.poke(memAddress +64, -15360);
        do Memory.poke(memAddress +96, 512);
        do Memory.poke(memAddress +128, 512);
        do Memory.poke(memAddress +160, 16896);
        do Memory.poke(memAddress +192, 512);
        do Memory.poke(memAddress +224, 512);
        do Memory.poke(memAddress +256, 512);
        do Memory.poke(memAddress +288, 3072);
        do Memory.poke(memAddress +320, -2048);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        // column 1
        do Memory.poke(memAddress +1, 8);
        do Memory.poke(memAddress +33, 20);
        do Memory.poke(memAddress +65, 35);
        do Memory.poke(memAddress +97, 32);
        do Memory.poke(memAddress +129, 32);
        do Memory.poke(memAddress +161, 33);
        do Memory.poke(memAddress +193, 32);
        do Memory.poke(memAddress +225, 32);
        do Memory.poke(memAddress +257, 16);
        do Memory.poke(memAddress +289, 24);
        do Memory.poke(memAddress +321, 15);
        do Memory.poke(memAddress +353, 0);
        do Memory.poke(memAddress +385, 0);
        return;
}

    method void drawOki()
    {
        do Sys.wait(300);
        do Screen.clearScreen();
        do Sys.wait(300);

        let i = 0;
        let j = 0;
        let shift = 0;
        let k = 19;

        while (i < 250)
        {
            while (j < 512)
            {
                if ((2 + j) < 512){ do Screen.drawRectangle(2 + j, 3 + i, 2 + j, 5 + i); }
                if ((4 + j) < 512) {do Screen.drawRectangle(3 + j, 2 + i, 4 + j, 2 + i); }
                if ((5 + j) < 512) {do Screen.drawRectangle(5 + j, 3 + i, 5 + j, 5 + i); }
                if ((4 + j) < 512) {do Screen.drawRectangle(3 + j, 6 + i, 4 + j, 6 + i); } // O


                if ((7 + j) < 512) {do Screen.drawRectangle(7 + j, 2 + i, 7 + j, 6 + i); }
                if ((8 + j) < 512) {do Screen.drawRectangle(8 + j, 4 + i, 8 + j, 4 + i); }
                if ((9 + j) < 512) {do Screen.drawRectangle(9 + j, 3 + i, 9 + j, 3 + i); }
                if ((10 + j) < 512) {do Screen.drawRectangle(10 + j, 2 + i, 10 + j, 2 + i); } 
                if ((9 + j) < 512) {do Screen.drawRectangle(9 + j, 5 + i, 9 + j, 5 + i); } 
                if ((10 + j) < 512) {do Screen.drawRectangle(10 + j, 6 + i, 10 + j, 6 + i); } // K


                if ((13 + j) < 512) {do Screen.drawRectangle(12 + j, 2 + i, 13 + j, 2 + i); }
                if ((13 + j) < 512) {do Screen.drawRectangle(12 + j, 4 + i, 13 + j, 6 + i); } // i

                if (j = shift)
                {
                    if ((2 + j - k) > -1) { do Screen.drawRectangle(2 + j - k, 3 + i, 2 + j - k, 5 + i); }
                    if ((3 + j - k) > -1) { do Screen.drawRectangle(3 + j - k, 2 + i, 4 + j - k, 2 + i); }
                    if ((5 + j - k) > -1) { do Screen.drawRectangle(5 + j - k, 3 + i, 5 + j - k, 5 + i); }
                    if ((3 + j - k) > -1) { do Screen.drawRectangle(3 + j - k, 6 + i, 4 + j - k, 6 + i); }

                    if ((7 + j - k) > -1) { do Screen.drawRectangle(7 + j - k, 2 + i, 7 + j - k, 6 + i); }
                    if ((8 + j - k) > -1) { do Screen.drawRectangle(8 + j - k, 4 + i, 8 + j - k, 4 + i); }
                    if ((9 + j - k) > -1) { do Screen.drawRectangle(9 + j - k, 3 + i, 9 + j - k, 3 + i); }
                    if ((10 + j - k) > -1) { do Screen.drawRectangle(10 + j - k, 2 + i, 10 + j - k, 2 + i); }
                    if ((9 + j - k) > -1) { do Screen.drawRectangle(9 + j - k, 3 + i, 9 + j - k, 5 + i); }
                    if ((10 + j - k) > -1) { do Screen.drawRectangle(10 + j - k, 2 + i, 10 + j - k, 2 + i); }

                    if ((12 + j - k) > -1) { do Screen.drawRectangle(12 + j - k, 2 + i, 13 + j - k, 2 + i); }
                    if ((12 + j - k) > -1) { do Screen.drawRectangle(12 + j - k, 4 + i, 13 + j - k, 6 + i); }

                }
                let j = j + 20;
            }
            let shift = shift + 1;
            if (shift = 18){ let shift = 0; }
            let j = shift;
            let i = i + 7;
        }

        return;
    }



    constructor OKeyboard new() 
    {
        var Point escPoint;
        var Point f1Point; var Point f2Point; var Point f3Point; var Point f4Point;
        var Point f5Point; var Point f6Point; var Point f7Point; var Point f8Point;
        var Point f9Point; var Point f10Point; var Point f11Point; var Point f12Point;

        var Point yoPoint; var Point onePoint; var Point twoPoint; var Point threePoint;
        var Point fourPoint; var Point fivePoint; var Point sixPoint; var Point sevenPoint; 
        var Point eightPoint; var Point ninePoint; var Point zeroPoint; var Point dashPoint;
        var Point plusPoint; var Point backspacePoint;

        var Point tabPoint; var Point qPoint; var Point wPoint; var Point ePoint;
        var Point rPoint; var Point tPoint; var Point yPoint; var Point uPoint;
        var Point iPoint; var Point oPoint; var Point pPoint;
        var Point rghtSqrBrcktPoint; var Point lftSqrBrcktPoint; var Point bcslshPoint;

        var Point capsPoint; var Point aPoint; var Point sPoint; var Point dPoint;
        var Point fPoint; var Point gPoint; var Point hPoint; var Point jPoint;
        var Point kPoint; var Point lPoint; var Point jiPoint;
        var Point quPoint; var Point enterPoint;     

        var Point lshiftPoint; var Point zPoint; var Point xPoint; var Point cPoint;
        var Point vPoint; var Point bPoint; var Point nPoint; var Point mPoint;
        var Point commaPoint; var Point dotPoint; var Point slshPoint; var Point rshiftPoint;

        var Point lctrlPoint; var Point winPoint; var Point laltPoint;
        var Point spacePoint; var Point raltPoint; var Point fnPoint;
        var Point catPoint; // THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT 
        var Point rctrlPoint;

        var Point left; var Point down; var Point right; var Point up;

        var Point print; var Point scrool; var Point pause;
        var Point insert; var Point home; var Point pageUp;
        var Point pageDown; var Point delete; var Point end;

        //73 работающие кнопки

        let i = 0;

        let IsPressed = Array.new(153);
        while (i < 153)
        {
            let IsPressed[i] = false;
            let i = i + 1;
        }
        let i = 0;



        let escPoint = Point.new(59, 63);
        let ESC = Button.new(escPoint, 17, 17);

        let f1Point = Point.new(91, 63);
        let F1 = Button.new(f1Point, 17, 17);

        let f2Point = Point.new(113, 63);
        let F2 = Button.new(f2Point, 17, 17);

        let f3Point = Point.new(135, 63);
        let F3 = Button.new(f3Point, 17, 17);

        let f4Point = Point.new(157, 63);
        let F4 = Button.new(f4Point, 17, 17);

        let f5Point = Point.new(185, 63);
        let F5 = Button.new(f5Point, 17, 17);

        let f6Point = Point.new(207, 63);
        let F6 = Button.new(f6Point, 17, 17);

        let f7Point = Point.new(229, 63);
        let F7 = Button.new(f7Point, 17, 17);

        let f8Point = Point.new(251, 63);
        let F8 = Button.new(f8Point, 17, 17);

        let f9Point = Point.new(279, 63);
        let F9 = Button.new(f9Point, 17, 17);

        let f10Point = Point.new(301, 63);
        let F10 = Button.new(f10Point, 17, 17);

        let f11Point = Point.new(323, 63);
        let F11 = Button.new(f11Point, 17, 17);

        let f12Point = Point.new(345, 63);
        let F12 = Button.new(f12Point, 17, 17);




        let yoPoint = Point.new(59, 91);
        let YO = Button.new(yoPoint, 17, 17);

        let onePoint = Point.new(79, 91);
        let ONE = Button.new(onePoint, 17, 17);

        let twoPoint = Point.new(99, 91);
        let TWO = Button.new(twoPoint, 17, 17);

        let threePoint = Point.new(119, 91);
        let THREE = Button.new(threePoint, 17, 17);

        let fourPoint = Point.new(139, 91);
        let FOUR = Button.new(fourPoint, 17, 17);

        let fivePoint = Point.new(159, 91);
        let FIVE = Button.new(fivePoint, 17, 17);

        let sixPoint = Point.new(179, 91);
        let SIX = Button.new(sixPoint, 17, 17);

        let sevenPoint = Point.new(199, 91);
        let SEVEN = Button.new(sevenPoint, 17, 17);

        let eightPoint = Point.new(219, 91);
        let EIGHT = Button.new(eightPoint, 17, 17);

        let ninePoint = Point.new(239, 91);
        let NINE = Button.new(ninePoint, 17, 17);

        let zeroPoint = Point.new(259, 91);
        let ZERO = Button.new(zeroPoint, 17, 17);

        let dashPoint = Point.new(279, 91);
        let DASH = Button.new(dashPoint, 17, 17);

        let plusPoint = Point.new(299, 91);
        let PLUS = Button.new(plusPoint, 17, 17);

        let backspacePoint = Point.new(320, 91);
        let BACKSPACE = Button.new(backspacePoint, 17, 40);



        let tabPoint = Point.new(59, 112);
        let TAB = Button.new(tabPoint, 17, 29);

        let qPoint = Point.new(91, 112);
        let Q = Button.new(qPoint, 17, 17);

        let wPoint = Point.new(111, 112);
        let W = Button.new(wPoint, 17, 17);

        let ePoint = Point.new(131, 112);
        let E = Button.new(ePoint, 17, 17);
        
        let rPoint = Point.new(151, 112);
        let R = Button.new(rPoint, 17, 17);
        
        let tPoint = Point.new(171, 112);
        let T = Button.new(tPoint, 17, 17);
        
        let yPoint = Point.new(191, 112);
        let Y = Button.new(yPoint, 17, 17);
        
        let uPoint = Point.new(211, 112);
        let U = Button.new(uPoint, 17, 17);
        
        let iPoint = Point.new(231, 112);
        let I = Button.new(iPoint, 17, 17);
        
        let oPoint = Point.new(251, 112);
        let O = Button.new(oPoint, 17, 17);
        
        let pPoint = Point.new(271, 112);
        let P = Button.new(pPoint, 17, 17);
        
        let rghtSqrBrcktPoint = Point.new(291, 112);
        let RGHTSQRBRCKT = Button.new(rghtSqrBrcktPoint, 17, 17);
        
        let lftSqrBrcktPoint = Point.new(311, 112);
        let LFTSQRBRCKT = Button.new(lftSqrBrcktPoint, 17, 17);

        let bcslshPoint = Point.new(331, 112);
        let BCSLSH = Button.new(bcslshPoint, 17, 29);




        let capsPoint = Point.new(59, 133);
        let CAPS = Button.new(capsPoint, 17, 35);

        let aPoint = Point.new(97, 133);
        let A = Button.new(aPoint, 17, 17);
        
        let sPoint = Point.new(117, 133);
        let S = Button.new(sPoint, 17, 17);

        let dPoint = Point.new(137, 133);
        let D = Button.new(dPoint, 17, 17);

        let fPoint = Point.new(157, 133);
        let F = Button.new(fPoint, 17, 17);

        let gPoint = Point.new(177, 133);
        let G = Button.new(gPoint, 17, 17);

        let hPoint = Point.new(197, 133);
        let H = Button.new(hPoint, 17, 17);

        let jPoint = Point.new(217, 133);
        let J = Button.new(jPoint, 17, 17);

        let kPoint = Point.new(237, 133);
        let K = Button.new(kPoint, 17, 17);

        let lPoint = Point.new(257, 133);
        let L = Button.new(lPoint, 17, 17);

        let jiPoint = Point.new(277, 133);
        let JI = Button.new(jiPoint, 17, 17);

        let quPoint = Point.new(297, 133);
        let QU = Button.new(quPoint, 17, 17);

        let enterPoint = Point.new(317, 133);
        let ENTER = Button.new(enterPoint, 17, 43);

        


        let lshiftPoint = Point.new(59, 154);
        let LSHIFT = Button.new(lshiftPoint, 17, 42);

        let zPoint = Point.new(105, 154);
        let Z = Button.new(zPoint, 17, 17);

        let xPoint = Point.new(125, 154);
        let X = Button.new(xPoint, 17, 17);

        let cPoint = Point.new(145, 154);
        let C = Button.new(cPoint, 17, 17);

        let vPoint = Point.new(165, 154);
        let V = Button.new(vPoint, 17, 17);

        let bPoint = Point.new(185, 154);
        let B = Button.new(bPoint, 17, 17);

        let nPoint = Point.new(205, 154);
        let N = Button.new(nPoint, 17, 17);

        let mPoint = Point.new(225, 154);
        let M = Button.new(mPoint, 17, 17);

        let commaPoint = Point.new(245, 154);
        let COMMA = Button.new(commaPoint, 17, 17);

        let dotPoint = Point.new(265, 154);
        let DOT = Button.new(dotPoint, 17, 17);

        let slshPoint = Point.new(285, 154);
        let SLSH = Button.new(slshPoint, 17, 17);

        let rshiftPoint = Point.new(307, 154);
        let RSHIFT = Button.new(rshiftPoint, 17, 53);

        


        let lctrlPoint = Point.new(59, 175);
        let LCTRL = Button.new(lctrlPoint, 17, 20);

        let winPoint = Point.new(85, 175);
        let WIN = Button.new(winPoint, 17, 20);

        let laltPoint = Point.new(111, 175);
        let LALT = Button.new(laltPoint, 17, 20);

        let spacePoint = Point.new(137, 175);
        let SPACE = Button.new(spacePoint, 17, 120);

        let raltPoint = Point.new(263, 175);
        let RALT = Button.new(raltPoint, 17, 20);

        let fnPoint = Point.new(289, 175);
        let FN = Button.new(fnPoint, 17, 20);

        let catPoint = Point.new(315, 175); // THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT 
        let CAT = Button.new(catPoint, 17, 20); // THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT 

        let rctrlPoint = Point.new(341, 175);
        let RCTRL = Button.new(rctrlPoint, 17, 20);




        let left = Point.new(377, 175);
        let LEFT = Button.new(left, 17, 17);

        let down = Point.new(399, 175);
        let DOWN = Button.new(down, 17, 17);

        let right = Point.new(421, 175);
        let RIGHT = Button.new(right, 17, 17);

        let up = Point.new(399, 154);
        let UP = Button.new(up, 17, 17);




        let print = Point.new(377, 63);
        let PRINT = Button.new(print, 17, 17);

        let scrool = Point.new(399, 63);
        let SCROLL = Button.new(scrool, 17, 17);

        let pause = Point.new(421, 63);
        let PAUSE = Button.new(pause, 17, 17);

        let insert = Point.new(377, 91);
        let INSERT = Button.new(insert, 17, 17);

        let home = Point.new(399, 91);
        let HOME = Button.new(home, 17, 17);

        let pageUp = Point.new(421, 91);
        let PAGEUP = Button.new(pageUp, 17, 17);

        let delete = Point.new(377, 112);
        let DELETE = Button.new(delete, 17, 17);

        let end = Point.new(399, 112);
        let END = Button.new(end, 17, 17);

        let pageDown = Point.new(421, 112);
        let PAGEDOWN = Button.new(pageDown, 17, 17);

        return this;
    }

    method void drawKeyboard()
    {
        do drawFrame();

        do drawCat(0);

        do drawButton(ESC);
        do drawButton(F1);
        do drawButton(F2);
        do drawButton(F3);
        do drawButton(F4);
        do drawButton(F5);
        do drawButton(F6);
        do drawButton(F7);
        do drawButton(F8);
        do drawButton(F9);
        do drawButton(F10);
        do drawButton(F11);
        do drawButton(F12);

        do drawButton(YO);
        do drawButton(ONE);
        do drawButton(TWO);
        do drawButton(THREE);
        do drawButton(FOUR);
        do drawButton(FIVE);
        do drawButton(SIX);
        do drawButton(SEVEN);
        do drawButton(EIGHT);
        do drawButton(NINE);
        do drawButton(ZERO);
        do drawButton(DASH);
        do drawButton(PLUS);
        do drawButton(BACKSPACE);

        do drawButton(TAB);
        do drawButton(Q);
        do drawButton(W);
        do drawButton(E);
        do drawButton(R);
        do drawButton(T);
        do drawButton(Y);
        do drawButton(U);
        do drawButton(I);
        do drawButton(O);
        do drawButton(P);
        do drawButton(RGHTSQRBRCKT);
        do drawButton(LFTSQRBRCKT);
        do drawButton(BCSLSH);

        do drawButton(CAPS);
        do drawButton(A);
        do drawButton(S);
        do drawButton(D);
        do drawButton(F);
        do drawButton(G);
        do drawButton(H);
        do drawButton(J);
        do drawButton(K);
        do drawButton(L);
        do drawButton(JI);
        do drawButton(QU);
        do drawButton(ENTER);

        do drawButton(LSHIFT);
        do drawButton(Z);
        do drawButton(X);
        do drawButton(C);
        do drawButton(V);
        do drawButton(B);
        do drawButton(N);
        do drawButton(M);
        do drawButton(COMMA);
        do drawButton(DOT);
        do drawButton(SLSH);
        do drawButton(RSHIFT);

        do drawButton(LCTRL);
        do drawButton(WIN);
        do drawButton(LALT);
        do drawButton(SPACE);
        do drawButton(RALT);
        do drawButton(FN);
        do drawButton(CAT); // THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT  THIS A CAT 
        do drawButton(RCTRL);

        do drawButton(LEFT);
        do drawButton(DOWN);
        do drawButton(RIGHT);
        do drawButton(UP);

        do drawButton(PRINT);
        do drawButton(SCROLL);
        do drawButton(PAUSE);
        do drawButton(INSERT);
        do drawButton(HOME);
        do drawButton(PAGEUP);
        do drawButton(PAGEDOWN);
        do drawButton(DELETE);
        do drawButton(END);

        return;
    }

    method void run () 
    {
        var char key;        

        do Screen.setColor(true);

        do drawKeyboard();

        while (true)
        {
            let key = Keyboard.keyPressed();


            if (key = 140 & ~(IsPressed[140])) { do coverButton(ESC); let IsPressed[140] = true; let i = i + 1; }
            if (key = 141 & ~(IsPressed[141])) { do coverButton(F1); let IsPressed[141] = true; let i = i + 1; }
            if (key = 142 & ~(IsPressed[142])) { do coverButton(F2); let IsPressed[142] = true; let i = i + 1; }
            if (key = 143 & ~(IsPressed[143])) { do coverButton(F3); let IsPressed[143] = true; let i = i + 1; }
            if (key = 144 & ~(IsPressed[144])) { do coverButton(F4); let IsPressed[144] = true; let i = i + 1; } 
            if (key = 145 & ~(IsPressed[145])) { do coverButton(F5); let IsPressed[145] = true; let i = i + 1; } 
            if (key = 146 & ~(IsPressed[146])) { do coverButton(F6); let IsPressed[146] = true; let i = i + 1; } 
            if (key = 147 & ~(IsPressed[147])) { do coverButton(F7); let IsPressed[147] = true; let i = i + 1; } 
            if (key = 148 & ~(IsPressed[148])) { do coverButton(F8); let IsPressed[148] = true; let i = i + 1; }
            if (key = 149 & ~(IsPressed[149])) { do coverButton(F9); let IsPressed[149] = true; let i = i + 1; }
            if (key = 150 & ~(IsPressed[150])) { do coverButton(F10); let IsPressed[150] = true; let i = i + 1; }
            if (key = 151 & ~(IsPressed[151])) { do coverButton(F11); let IsPressed[151] = true; let i = i + 1; }
            if (key = 152 & ~(IsPressed[152])) { do coverButton(F12); let IsPressed[152] = true; let i = i + 1; }
            if (key = 96 & ~(IsPressed[96])) { do coverButton(YO); let IsPressed[96] = true; let i = i + 1; }
            if (key = 48 & ~(IsPressed[48])) { do coverButton(ZERO); let IsPressed[48] = true; let i = i + 1; }
            if (key = 49 & ~(IsPressed[49])) { do coverButton(ONE); let IsPressed[49] = true; let i = i + 1; }
            if (key = 50 & ~(IsPressed[50])) { do coverButton(TWO); let IsPressed[50] = true; let i = i + 1; }
            if (key = 51 & ~(IsPressed[51])) { do coverButton(THREE); let IsPressed[51] = true; let i = i + 1; }
            if (key = 52 & ~(IsPressed[52])) { do coverButton(FOUR); let IsPressed[52] = true; let i = i + 1; }
            if (key = 53 & ~(IsPressed[53])) { do coverButton(FIVE); let IsPressed[53] = true; let i = i + 1; }
            if (key = 54 & ~(IsPressed[54])) { do coverButton(SIX); let IsPressed[54] = true; let i = i + 1; }
            if (key = 55 & ~(IsPressed[55])) { do coverButton(SEVEN); let IsPressed[55] = true; let i = i + 1; } 
            if (key = 56 & ~(IsPressed[56])) { do coverButton(EIGHT); let IsPressed[56] = true; let i = i + 1; }
            if (key = 57 & ~(IsPressed[57])) { do coverButton(NINE); let IsPressed[57] = true; let i = i + 1; }
            if (key = 45 & ~(IsPressed[45])) { do coverButton(DASH); let IsPressed[45] = true; let i = i + 1; }
            if (key = 61 & ~(IsPressed[61])) { do coverButton(PLUS); let IsPressed[61] = true; let i = i + 1; }
            if (key = 81 & ~(IsPressed[81])) { do coverButton(Q); let IsPressed[81] = true; let i = i + 1; }
            if (key = 87 & ~(IsPressed[87])) { do coverButton(W); let IsPressed[87] = true; let i = i + 1; }
            if (key = 69 & ~(IsPressed[69])) { do coverButton(E); let IsPressed[69] = true; let i = i + 1; }
            if (key = 82 & ~(IsPressed[82])) { do coverButton(R); let IsPressed[82] = true; let i = i + 1; }
            if (key = 84 & ~(IsPressed[84])) { do coverButton(T); let IsPressed[84] = true; let i = i + 1; }
            if (key = 89 & ~(IsPressed[89])) { do coverButton(Y); let IsPressed[89] = true; let i = i + 1; }
            if (key = 85 & ~(IsPressed[85])) { do coverButton(U); let IsPressed[85] = true; let i = i + 1; }
            if (key = 73 & ~(IsPressed[73])) { do coverButton(I); let IsPressed[73] = true; let i = i + 1; }
            if (key = 79 & ~(IsPressed[79])) { do coverButton(O); let IsPressed[79] = true; let i = i + 1; }
            if (key = 80 & ~(IsPressed[80])) { do coverButton(P); let IsPressed[80] = true; let i = i + 1; }
            if (key = 91 & ~(IsPressed[91])) { do coverButton(RGHTSQRBRCKT); let IsPressed[91] = true; let i = i + 1; }
            if (key = 93 & ~(IsPressed[93])) { do coverButton(LFTSQRBRCKT); let IsPressed[93] = true; let i = i + 1; }
            if (key = 65 & ~(IsPressed[65])) { do coverButton(A); let IsPressed[65] = true; let i = i + 1; }
            if (key = 83 & ~(IsPressed[83])) { do coverButton(S); let IsPressed[83] = true; let i = i + 1; }
            if (key = 68 & ~(IsPressed[68])) { do coverButton(D); let IsPressed[68] = true; let i = i + 1; }
            if (key = 70 & ~(IsPressed[70])) { do coverButton(F); let IsPressed[70] = true; let i = i + 1; }
            if (key = 71 & ~(IsPressed[71])) { do coverButton(G); let IsPressed[71] = true; let i = i + 1; }
            if (key = 72 & ~(IsPressed[72])) { do coverButton(H); let IsPressed[72] = true; let i = i + 1; }
            if (key = 74 & ~(IsPressed[74])) { do coverButton(J); let IsPressed[74] = true; let i = i + 1; }
            if (key = 75 & ~(IsPressed[75])) { do coverButton(K); let IsPressed[75] = true; let i = i + 1; }
            if (key = 76 & ~(IsPressed[76])) { do coverButton(L); let IsPressed[76] = true; let i = i + 1; }
            if (key = 59 & ~(IsPressed[59])) { do coverButton(JI); let IsPressed[59] = true; let i = i + 1; }
            if (key = 39 & ~(IsPressed[39])) { do coverButton(QU); let IsPressed[39] = true; let i = i + 1; }
            if (key = 92 & ~(IsPressed[92])) { do coverButton(BCSLSH); let IsPressed[92] = true; let i = i + 1; }
            if (key = 90 & ~(IsPressed[90])) { do coverButton(Z); let IsPressed[90] = true; let i = i + 1; }
            if (key = 88 & ~(IsPressed[88])) { do coverButton(X); let IsPressed[88] = true; let i = i + 1; }
            if (key = 67 & ~(IsPressed[67])) { do coverButton(C); let IsPressed[67] = true; let i = i + 1; }
            if (key = 86 & ~(IsPressed[86])) { do coverButton(V); let IsPressed[86] = true; let i = i + 1; }
            if (key = 66 & ~(IsPressed[66])) { do coverButton(B); let IsPressed[66] = true; let i = i + 1; }
            if (key = 78 & ~(IsPressed[78])) { do coverButton(N); let IsPressed[78] = true; let i = i + 1; }
            if (key = 77 & ~(IsPressed[77])) { do coverButton(M); let IsPressed[77] = true; let i = i + 1; }
            if (key = 44 & ~(IsPressed[44])) { do coverButton(COMMA); let IsPressed[44] = true; let i = i + 1; }
            if (key = 46 & ~(IsPressed[46])) { do coverButton(DOT); let IsPressed[46] = true; let i = i + 1; }
            if (key = 47 & ~(IsPressed[47])) { do coverButton(SLSH); let IsPressed[47] = true; let i = i + 1; }
            if (key = 32 & ~(IsPressed[32])) { do coverButton(SPACE); let IsPressed[32] = true; let i = i + 1; } 
            if (key = 128 & ~(IsPressed[128])) { do coverButton(ENTER); let IsPressed[128] = true; let i = i + 1; }
            if (key = 129 & ~(IsPressed[129])) { do coverButton(BACKSPACE); let IsPressed[129] = true; let i = i + 1; }
            if (key = 130 & ~(IsPressed[130])) { do coverButton(LEFT); let IsPressed[130] = true; let i = i + 1; }
            if (key = 131 & ~(IsPressed[131])) { do coverButton(UP); let IsPressed[131] = true; let i = i + 1; }
            if (key = 132 & ~(IsPressed[132])) { do coverButton(RIGHT); let IsPressed[132] = true; let i = i + 1; }
            if (key = 133 & ~(IsPressed[133])) { do coverButton(DOWN); let IsPressed[133] = true; let i = i + 1; }
            if (key = 134 & ~(IsPressed[134])) { do coverButton(HOME); let IsPressed[134] = true; let i = i + 1; }
            if (key = 135 & ~(IsPressed[135])) { do coverButton(END); let IsPressed[135] = true; let i = i + 1; }
            if (key = 136 & ~(IsPressed[136])) { do coverButton(PAGEUP); let IsPressed[136] = true; let i = i + 1; }
            if (key = 137 & ~(IsPressed[137])) { do coverButton(PAGEDOWN); let IsPressed[137] = true; let i = i + 1;}
            if (key = 138 & ~(IsPressed[138])) { do coverButton(INSERT); let IsPressed[138] = true; let i = i + 1; }
            if (key = 139 & ~(IsPressed[139])) { do coverButton(DELETE); let IsPressed[139] = true; let i = i + 1; }

            if (i = 73) { do drawOki(); }
        }
        return;
    }

    method void dispose() 
    {
        do Memory.deAlloc(this);
        return;
    }
}